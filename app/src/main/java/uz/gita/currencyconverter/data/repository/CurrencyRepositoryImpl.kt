package uz.gita.currencyconverter.data.repositoryimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.flowimport uz.gita.currencyconverter.data.mapper.toParamimport uz.gita.currencyconverter.data.source.remote.api.CurrencyApiimport uz.gita.currencyconverter.domain.models.CurrencyParamimport uz.gita.currencyconverter.domain.repository.CurrencyRepositoryimport javax.inject.Injectclass CurrencyRepositoryImpl @Inject constructor(    private val api: CurrencyApi,) : CurrencyRepository {    override fun getAllCurrency(): Flow<List<CurrencyParam>> = flow {        val response = api.getAllCurrency()        if (response.isSuccessful && response.body() != null) {            response.body()?.let {                emit(response.body()!!.map { it.toParam() })            }        }    }.catch { }}