package uz.gita.currencyconverter.presenter.screens.currencyimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.material3.TextFieldDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Alignment.Companion.CenterVerticallyimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.Fontimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getViewModelimport coil.compose.AsyncImageimport coil.decode.SvgDecoderimport coil.request.ImageRequestimport uz.gita.currencyconverter.Rimport uz.gita.currencyconverter.domain.models.CurrencyParamclass CurrencyScreen(private val data1: CurrencyParam, private val data2: CurrencyParam) :    AndroidScreen() {    @Composable    override fun Content() {        val viewModel: CurrencyContract.ViewModel = getViewModel<CurrencyViewModel>()        CurrencyScreenContent(            viewModel.uiState.collectAsState().value, viewModel::onEventDispatcher,            data1 = data1,            data2 = data2        )    }}@OptIn(ExperimentalMaterial3Api::class)@Composablefun CurrencyScreenContent(    uiState: CurrencyContract.UIState,    onEventDispatcher: (CurrencyContract.Intent) -> Unit,    data1: CurrencyParam,    data2: CurrencyParam,) {    Column(        modifier = Modifier.fillMaxSize()    ) {        var text by remember { mutableStateOf("") }        Box(            modifier = Modifier                .fillMaxWidth()                .padding(start = 20.dp, top = 20.dp)        ) {            Icon(                imageVector = Icons.Default.ArrowBack,                contentDescription = null,                modifier = Modifier                    .size(24.dp)                    .align(Alignment.CenterStart)                    .clickable { onEventDispatcher.invoke(CurrencyContract.Intent.Back) },            )            Text(                text = "Konvertatsiya",                style = TextStyle(                    fontSize = 24.sp,                    fontFamily = FontFamily(Font(R.font.roboto_medium))                ),                modifier = Modifier.align(Alignment.Center)            )        }        Spacer(modifier = Modifier.height(11.dp))        Text(            text = "Jonli tariflarni tekshiring, miqdorni kiriting va konvertatsiya natijasiga ega bo`ling.",            style = TextStyle(                textAlign = TextAlign.Center,                color = Color(0xFF808080),                fontSize = 16.sp,            ),            modifier = Modifier.padding(horizontal = 20.dp)        )        Spacer(modifier = Modifier.height(41.dp))        Card(            modifier = Modifier                .fillMaxWidth()                .height(285.dp)                .padding(horizontal = 20.dp),            elevation = CardDefaults.cardElevation(defaultElevation = 10.dp),            colors = CardDefaults.cardColors(Color.White)        ) {            Row {                Column(modifier = Modifier.padding(20.dp)) {                    Text(                        text = "Miqdori",                        style = TextStyle(                            color = Color(0xFF808080),                            fontSize = 18.sp                        )                    )                    Spacer(modifier = Modifier.height(14.dp))                    Row {                        AsyncImage(                            model = ImageRequest.Builder(LocalContext.current)                                .data(                                    "https://flagcdn.com/${                                        data1.Ccy.substring(0, 2).lowercase()                                    }.svg"                                )                                .decoderFactory(SvgDecoder.Factory())                                .build(),                            contentScale = ContentScale.Crop,                            contentDescription = null,                            modifier = Modifier                                .clip(CircleShape)                                .size(50.dp)                                .background(color = Color.Black)                                .align(CenterVertically)                        )                        Text(                            text = data1.Ccy,                            style = TextStyle(                                color = Color(0xFF26278D),                                fontSize = 20.sp,                                fontFamily = FontFamily(Font(R.font.roboto_medium))                            ),                            modifier = Modifier                                .align(Alignment.CenterVertically)                                .padding(start = 13.dp)                        )                        Spacer(modifier = Modifier.weight(1f))                        TextField(                            value = text,                            onValueChange = { newText ->                                text = newText                            },                            maxLines = 1,                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),                            colors = TextFieldDefaults.textFieldColors(                                cursorColor = Color.Black,                                disabledLabelColor = Color(0xFFEFEFEF),                                focusedIndicatorColor = Color.Transparent,                                unfocusedIndicatorColor = Color.Transparent                            ),                            modifier = Modifier                                .width(141.dp)                                .clip(RoundedCornerShape(7.dp))                                .background(Color(0xFFEFEFEF)),                        )                    }                    Spacer(modifier = Modifier.height(37.dp))                    Image(                        painter = painterResource(id = R.drawable.line),                        contentScale = ContentScale.Crop,                        contentDescription = null,                        modifier = Modifier.fillMaxWidth(),                    )                    Spacer(modifier = Modifier.height(10.dp))                    Text(                        text = "Konvertatsiya qilingan miqdor",                        style = TextStyle(                            color = Color(0xFF808080),                            fontSize = 18.sp                        )                    )                    Spacer(modifier = Modifier.height(14.dp))                    Row {                        AsyncImage(                            model = ImageRequest.Builder(LocalContext.current)                                .data(                                    "https://flagcdn.com/${                                        data2.Ccy.substring(0, 2).lowercase()                                    }.svg"                                )                                .decoderFactory(SvgDecoder.Factory())                                .build(),                            contentScale = ContentScale.Crop,                            contentDescription = null,                            modifier = Modifier                                .clip(CircleShape)                                .size(50.dp)                                .background(color = Color.Black)                                .align(CenterVertically)                        )                        Text(                            text = data2.Ccy,                            style = TextStyle(                                color = Color(0xFF26278D),                                fontSize = 20.sp,                                fontFamily = FontFamily(Font(R.font.roboto_medium))                            ),                            modifier = Modifier                                .align(Alignment.CenterVertically)                                .padding(start = 13.dp)                        )                        Spacer(modifier = Modifier.weight(1f))                        TextField(                            value = if (text                                    .isEmpty()                            ) "0.00" else "%.2f".format((text.toFloat() * data1.Rate.toFloat()) / data2.Rate.toFloat()),                            onValueChange = { newText ->                                text = newText                            },                            enabled = false,                            maxLines = 1,                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),                            colors = TextFieldDefaults.textFieldColors(                                cursorColor = Color.Black,                                disabledLabelColor = Color(0xFFEFEFEF),                                focusedIndicatorColor = Color.Transparent,                                unfocusedIndicatorColor = Color.Transparent                            ),                            modifier = Modifier                                .width(141.dp)                                .clip(RoundedCornerShape(7.dp))                                .background(Color(0xFFEFEFEF)),                        )                    }                }            }        }        Spacer(modifier = Modifier.height(30.dp))        Text(            text = "Indikativ valyuta kursi",            style = TextStyle(                textAlign = TextAlign.Center,                color = Color(0xFF808080),                fontSize = 16.sp,            ),            modifier = Modifier.padding(horizontal = 20.dp)        )        Spacer(modifier = Modifier.height(13.dp))        Text(            text = "1 ${data1.Ccy} = ${"%.4f".format(data1.Rate.toFloat() / data2.Rate.toFloat())} ${data2.Ccy}",            style = TextStyle(                textAlign = TextAlign.Center,                color = Color(0xFF333333),                fontSize = 18.sp,            ),            modifier = Modifier.padding(horizontal = 20.dp)        )    }}@Composable@Preview(showBackground = true)fun CurrencyScreenPreview() {    CurrencyScreenContent(        uiState = CurrencyContract.UIState(data1 = null, data2 = null),        onEventDispatcher = {},        data1 = CurrencyParam("", "", "", "", "", "", "", "", "", "", 1),        data2 = CurrencyParam("", "", "", "", "", "", "", "", "", "", 1)    )}