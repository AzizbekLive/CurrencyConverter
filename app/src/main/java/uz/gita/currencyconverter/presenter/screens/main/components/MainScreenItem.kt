package uz.gita.currencyconverter.presenter.screens.main.componentsimport android.annotation.SuppressLintimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Alignment.Companion.CenterVerticallyimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.font.Fontimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport coil.compose.AsyncImageimport coil.decode.SvgDecoderimport coil.request.ImageRequestimport uz.gita.currencyconverter.Rimport uz.gita.currencyconverter.domain.models.CurrencyParam@SuppressLint("DefaultLocale", "ComposableNaming", "InvalidColorHexValue")@Composablefun mainScreenItem(    data: CurrencyParam = CurrencyParam("", "", "", "", "", "", "", "", "", "", 1),    isSelected: Boolean = false,    onClick: (CurrencyParam) -> Unit = {},) {    Column(        modifier = Modifier            .fillMaxSize()            .background(if (isSelected) Color.Green else Color.White)            .padding(vertical = 8.dp)            .clickable {                onClick.invoke(data)            }    ) {        Row(            modifier = Modifier                .fillMaxSize()                .padding(horizontal = 16.dp),            verticalAlignment = Alignment.CenterVertically        ) {            val Percent =                "%.2f".format(((data.Rate.toFloat() * 100) / (data.Rate.toFloat() - data.Diff.toFloat())) - 100)            AsyncImage(                model = ImageRequest.Builder(LocalContext.current)                    .data("https://flagcdn.com/${data.Ccy.substring(0, 2).toLowerCase()}.svg")                    .decoderFactory(SvgDecoder.Factory())                    .build(),                contentScale = ContentScale.Crop,                contentDescription = null,                modifier = Modifier                    .clip(CircleShape)                    .size(50.dp)                    .background(color = Color.Black)            )            Spacer(modifier = Modifier.width(20.dp))            Column {                Row() {                    Text(                        text = data.Ccy,                        fontFamily = FontFamily(Font(R.font.roboto_medium)),                        color = Color(0xFF333333),                        fontSize = 21.sp                    )                    Spacer(modifier = Modifier.weight(1f))                    Text(                        text = data.Rate,                        fontFamily = FontFamily(Font(R.font.roboto_medium)),                        color = Color(0xFF333333),                        fontSize = 21.sp,                        textAlign = TextAlign.End                    )                }                Row() {                    Text(                        text = data.CcyNm_UZ,                        fontFamily = FontFamily(Font(R.font.roboto_medium)),                        color = Color(0xFF808080),                        fontSize = 16.sp                    )                    Spacer(modifier = Modifier.weight(1f))                    Text(                        text = data.Diff,                        fontFamily = FontFamily(Font(R.font.roboto_medium)),                        color = Color(0xFF808080),                        fontSize = 16.sp,                        textAlign = TextAlign.End                    )                    Image(                        painter = painterResource(id = (if (Percent[0] != '-') R.drawable.arrow_up else R.drawable.arrow_down)),                        contentDescription = null,                        modifier = Modifier                            .size(16.dp)                            .padding(top = 4.dp)                            .align(CenterVertically)                    )                }            }        }    }    Spacer(modifier = Modifier.height(8.dp))    Image(        painter = painterResource(id = R.drawable.line),        contentScale = ContentScale.Crop,        contentDescription = null,        modifier = Modifier            .fillMaxWidth()            .padding(start = 60.dp, end = 60.dp)    )}@SuppressLint("ComposableNaming")@Composable@Preview(showBackground = true)fun mainScreenItemPreview() {    mainScreenItem(        data = CurrencyParam("", "", "", "", "", "", "", "", "", "", 1)    )}